apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "nextcloud.fullname" . }}-mysqlserver
  namespace: {{ .Release.Namespace }}
  labels:
    app: "{{ template "nextcloud.fullname" . }}"
    chart: "{{ .Chart.Name }}"
    release: "{{ .Release.Name }}"
    dqservice: hostednextcloud
    cust: "{{ .Values.custnr }}"
    instanceid: "{{ .Values.instanceid }}"
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: "{{ template "nextcloud.fullname" . }}"
      dqservice: hostednextcloud
      cust: "{{ .Values.custnr }}"
      instanceid: "{{ .Values.instanceid }}"
      chart: "{{ .Chart.Name }}"
      release: "{{ .Release.Name }}"
  strategy:
    type: Recreate
    rollingUpdate:
  progressDeadlineSeconds: 240
  minReadySeconds: 20
  revisionHistoryLimit: 5
  #automountServiceAccountToken: false
  template:
    metadata:
      labels:
        app: "{{ template "nextcloud.fullname" . }}"
        dqservice: hostednextcloud
        cust: "{{ .Values.custnr }}"
        instanceid: "{{ .Values.instanceid }}"
        chart: "{{ .Chart.Name }}"
        release: "{{ .Release.Name }}"
    spec:
      {{- if .Values.affinity }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
      {{- end }}
      volumes:
      - name: database
        nfs:
          path: /nfs
          server: 10.100.0.247
      - name: config
        configMap:
          name: {{ template "nextcloud.fullname" . }}-mysqlconfig
          items:
          - key: mysql-config
            path: my.cnf
      - name: logs
        emptyDir: {}
      containers:
      - name: nextcloud-mysql
        image: "{{ .Values.db.image }}:{{ .Values.db.imageTag }}"
        volumeMounts:
        - name: config
          mountPath: /etc/my.cnf.d
        - name: database
          mountPath: /var/lib/mysql
{{ if .Values.nextcloudpro.customstorage.enabled}}
          subPath: {{ .Values.nextcloudpro.customstorage.path }}
{{ else }}
          subPath: {{ .Values.custnr }}/{{ template "nextcloudpro.fullname" . }}/nextcloudmysql
{{- end }}
        - name: logs
          mountPath: /var/log
        env:
          - name: MYSQL_ROOT_HOST
            value: "%"
          - name: MYSQL_LOG_CONSOLE
            value: "{{ .Values.db.settings.logconsole }}"
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ template "nextcloudpro.fullname" . }}-dbcredentials
                key: db.rootpw
          - name: MYSQL_DATABASE
            valueFrom:
              configMapKeyRef:
                name: {{ template "nextcloudpro.fullname" . }}-hostingconfig
                key: db.name
          - name: MYSQL_USER
            valueFrom:
              secretKeyRef:
                name: {{ template "nextcloudpro.fullname" . }}-dbcredentials
                key: db.user
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ template "nextcloudpro.fullname" . }}-dbcredentials
                key: db.userpw
        livenessProbe:
          tcpSocket:
            port: 3306
{{ toYaml .Values.db.livenessProbe | indent 10 }}
        readinessProbe:
          tcpSocket:
            port: 3306
{{ toYaml .Values.db.readinessProbe | indent 10 }}
{{- if .Values.db.logs.enabled}}
{{ $global := . }}
{{ range $i, $log := .Values.db.logs.logfiles }}
      - name: mysql-{{ $log.name }}
        image: "{{ $global.Values.db.logs.image }}:{{ $global.Values.db.logs.imageTag }}"
        args: [/bin/sh, -c, 'tail -n+1 -f {{ $log.path }}']
        volumeMounts:
        - name: logs
          mountPath: /var/log

{{ end }}
{{ end }}
---
# nextcloud WebApp
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "nextcloudpro.fullname" . }}-nextcloud
  namespace: {{ .Release.Namespace }}
  labels:
    app: nectcloud
    dqservice: hostednextcloud
    cust: "{{ .Values.custnr }}"
    instanceid: "{{ .Values.instanceid }}"
    chart: "{{ .Chart.Name }}"
    release: "{{ .Release.Name }}"
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: nextcloudapiapp
      dqservice: hostednextcloud
      cust: "{{ .Values.custnr }}"
      instanceid: "{{ .Values.instanceid }}"
      chart: "{{ .Chart.Name }}"
      release: "{{ .Release.Name }}"
{{ toYaml .Values.scaling | indent 2 }}
  serviceName: {{ template "nextcloudpro.fullname" . }}-nextcloudapiapp-srv
  updateStrategy:
    type: RollingUpdate
  #automountServiceAccountToken: false
  template:
    metadata:
      labels:
        app: nextcloudapiapp
        dqservice: hostednextcloud
        cust: "{{ .Values.custnr }}"
        instanceid: "{{ .Values.instanceid }}"
        chart: "{{ .Chart.Name }}"
        release: "{{ .Release.Name }}"
    spec:
      containers:
      - name: nextcloud
        image: "{{ .Values.image }}:{{ .Values.imageTag }}"
        resources:
          requests:
            cpu: "200m"
            memory: "512M"
          limits:
            memory: "2048M"
            cpu: 2
        ports:
        - name: nextcloudapi
          containerPort: 80
        env:
          - name: MYSQL_HOST
            value: {{ template "nextcloudpro.fullname" . }}-mysql-srv
          - name: MYSQL_DATABASE
            valueFrom:
              configMapKeyRef:
                name: {{ template "nextcloudpro.fullname" . }}-hostingconfig
                key: db.name
          - name: MYSQL_USER
            valueFrom:
              secretKeyRef:
                name: {{ template "nextcloudpro.fullname" . }}-dbcredentials
                key: db.user
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ template "nextcloudpro.fullname" . }}-dbcredentials
                key: db.userpw
        volumeMounts:
        - name: logs
          mountPath: /var/log
        readinessProbe:
          httpGet:
            path: /healthCheck.html
            port: nextcloudapi
            scheme: HTTP
{{ toYaml .Values.nextcloudpro.readinessProbe | indent 10 }}
{{- if .Values.logs.enabled}}
{{ $global := . }}
{{ range $i, $log := .Values.logs.logfiles }}
      - name: nextcloud-{{ $log.name }}
        image: "{{ $global.Values.logs.image }}:{{ $global.Values.logs.imageTag }}"
        args: [/bin/sh, -c, 'tail -n+1 -f {{ $log.path }}']
        volumeMounts:
        - name: logs
          mountPath: /var/log

{{ end }}
{{ end }}
      - name: nextcloudweb
        image: "{{ .Values.web.image }}:{{ .Values.web.imageTag }}"

      volumes:
      - name: logs
        emptyDir: {}
