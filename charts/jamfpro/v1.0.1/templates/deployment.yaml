# MySQL Database
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "jamfpro.fullname" . }}-mysqlserver
  namespace: {{ .Release.Namespace }}
  labels:
    app: jamfmysql
    dqservice: hostedjamf
    cust: "{{ .Values.custnr }}"
    instanceid: "{{ .Values.instanceid }}"
    chart: "{{ .Chart.Name }}"
    release: "{{ .Release.Name }}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jamfmysql
      dqservice: hostedjamf
      cust: "{{ .Values.custnr }}"
      instanceid: "{{ .Values.instanceid }}"
      chart: "{{ .Chart.Name }}"
      release: "{{ .Release.Name }}"
  strategy:
    type: Recreate
    rollingUpdate:
  progressDeadlineSeconds: 240
  minReadySeconds: 20
  revisionHistoryLimit: 5
  template:
    metadata:
      labels:
        app: jamfmysql
        dqservice: hostedjamf
        cust: "{{ .Values.custnr }}"
        instanceid: "{{ .Values.instanceid }}"
        chart: "{{ .Chart.Name }}"
        release: "{{ .Release.Name }}"
    spec:
      volumes:
      - name: database
        nfs:
          path: /nfs
          server: 10.100.0.247
      - name: config
        configMap:
          name: {{ template "jamfpro.fullname" . }}-mysqlconfig
          items:
          - key: mysql-config
            path: my.cnf
      containers:
      - name: jamf-mysql
        image: "{{ .Values.db.image }}:{{ .Values.db.imageTag }}"
        volumeMounts:
        - name: config
          mountPath: /etc/mysql/conf.d
        - name: database
          mountPath: /var/lib/mysql
{{ if .Values.jamfpro.customstorage.enabled}}
          subPath: {{ .Values.jamfpro.customstorage.path }}
{{ else }}
          subPath: {{ .Values.custnr }}/{{ template "jamfpro.fullname" . }}/jamfmysql
{{- end }}
        env:
          - name: MYSQL_ROOT_HOST
            value: "%"
          - name: MYSQL_LOG_CONSOLE
            value: "{{ .Values.db.settings.logconsole }}"
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ template "jamfpro.fullname" . }}-dbcredentials
                key: db.rootpw
          - name: MYSQL_DATABASE
            valueFrom:
              configMapKeyRef:
                name: {{ template "jamfpro.fullname" . }}-hostingconfig
                key: db.name
          - name: MYSQL_USER
            valueFrom:
              secretKeyRef:
                name: {{ template "jamfpro.fullname" . }}-dbcredentials
                key: db.user
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ template "jamfpro.fullname" . }}-dbcredentials
                key: db.userpw
        livenessProbe:
          tcpSocket:
            port: 3306
{{ toYaml .Values.db.livenessProbe | indent 10 }}
        readinessProbe:
          tcpSocket:
            port: 3306
{{ toYaml .Values.db.readinessProbe | indent 10 }}
---
# Jamf WebApp
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "jamfpro.fullname" . }}-jamfwebapp
  namespace: {{ .Release.Namespace }}
  labels:
    app: jamfwebapp
    dqservice: hostedjamf
    cust: "{{ .Values.custnr }}"
    instanceid: "{{ .Values.instanceid }}"
    chart: "{{ .Chart.Name }}"
    release: "{{ .Release.Name }}"
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: jamfwebapp
      dqservice: hostedjamf
      cust: "{{ .Values.custnr }}"
      instanceid: "{{ .Values.instanceid }}"
      chart: "{{ .Chart.Name }}"
      release: "{{ .Release.Name }}"
{{ toYaml .Values.scaling | indent 2 }}
  serviceName: {{ template "jamfpro.fullname" . }}-jamfwebapp-srv
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: jamfwebapp
        dqservice: hostedjamf
        cust: "{{ .Values.custnr }}"
        instanceid: "{{ .Values.instanceid }}"
        chart: "{{ .Chart.Name }}"
        release: "{{ .Release.Name }}"
    spec:
      containers:
      - name: jamf
        image: "{{ .Values.image }}:{{ .Values.imageTag }}"
        resources:
          requests:
            cpu: "200m"
            memory: "1024M"
          limits:
            memory: "2048M"
            cpu: 2
        ports:
        - name: jamfweb
          containerPort: 8006
        env:
          - name: db_host
            value: {{ template "jamfpro.fullname" . }}-mysql-srv
          - name: db_port
            valueFrom:
              configMapKeyRef:
                name: {{ template "jamfpro.fullname" . }}-hostingconfig
                key: db.port
          - name: db_name
            valueFrom:
              configMapKeyRef:
                name: {{ template "jamfpro.fullname" . }}-hostingconfig
                key: db.name
          - name: db_username
            valueFrom:
              secretKeyRef:
                name: {{ template "jamfpro.fullname" . }}-dbcredentials
                key: db.user
          - name: db_password
            valueFrom:
              secretKeyRef:
                name: {{ template "jamfpro.fullname" . }}-dbcredentials
                key: db.userpw
{{- if .Values.jamfpro.cacheenabled}}
          - name: memcachedservice
            valueFrom:
              configMapKeyRef:
                name: {{ template "jamfpro.fullname" . }}-hostingconfig
                key: cache.memcachedservice
          - name: memcacheuniqueid
            valueFrom:
              configMapKeyRef:
                name: {{ template "jamfpro.fullname" . }}-hostingconfig
                key: cache.uniqueid
{{- end }}
          - name: cacheenabled
            valueFrom:
              configMapKeyRef:
                name: {{ template "jamfpro.fullname" . }}-hostingconfig
                key: cache.enabled
        volumeMounts:
        - name: logs
          mountPath: /var/log
        readinessProbe:
          httpGet:
            path: /healthCheck.html
            port: jamfweb
            scheme: HTTP
{{ toYaml .Values.jamfpro.readinessProbe | indent 10 }}
{{- if .Values.logs.enabled}}
{{ $global := . }}
{{ range $i, $log := .Values.logs.logfiles }}
      - name: jamf-{{ $log.name }}
        image: "{{ $global.Values.logs.image }}:{{ $global.Values.logs.imageTag }}"
        args: [/bin/sh, -c, 'tail -n+1 -f {{ $log.path }}']
        volumeMounts:
        - name: logs
          mountPath: /var/log

{{ end }}
{{ end }}
      - name: jamf-healthcheck
        image: "byrnedo/alpine-curl:0.1.7"
        command: ["/bin/sh"]
        args: [ '-c', 'while true; do  curl --header "Connection: keep-alive" "http://127.0.0.1:8006/healthCheck.html"; sleep 8; done']
      volumes:
      - name: logs
        emptyDir: {}
# https://kubernetes.io/docs/tasks/run-application/run-replicated-stateful-application/
# https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#deployment-and-scaling-guarantees
# https://kubernetes.io/docs/tutorials/stateful-application/basic-stateful-set/
